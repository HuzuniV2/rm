<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="0" name="syn"/>
<event size="0" name="synack"/>
<event size="0" name="hello"/>
<event size="1" name="gotox"/>
<event size="1" name="gotoy"/>
<event size="1" name="gotoa"/>
<event size="1" name="op"/>
<event size="1" name="sendGoto"/>
<event size="1" name="test"/>
<event size="1" name="obsr"/>
<event size="3" name="pos"/>


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">
var myId = 0b0000
var leader = 1 #leader or follower?
var received = 0 #var to keep the received message temporarily
var tempOp = 0 # temp var to parse the OpCode
var followerTargetX = 0
var followerTargetY = 0
var followerTargetA = 360
var SENDTIME = 2
var sendCount = 0
var sendGotos = 0
var followerCount = 0
var followersNeeded = 1
var receivedMessages[] = [0, 0, 0, 0, 0, 0, 0, 0]

# FLAGS
var SPEEDL = 500  # left wheel speed for each cell/second
var SPEEDR = 485 # right wheel speed for each cell/second
var TURNSPEED = 233 # correct speed to turn 90 degrees
#----------------------------------------------------------
# VARS
var dleft     # Distance traveled by the left wheel
var dright    # Distance traveled by the right wheel
var dcenter   # Distance traveled by the center of the robot
var currentX = 0 var currentY = 1 var currentDir = 360
var targetX  = 5  var targetY = 5  var targetDir = 360
var walk = 0     # flag for going straight(hehexd), 0 dead 1 do
var turnLeft = 0 # flag for turning left, 0 dead 1 do
var turnRight = 0 # flag for turning right, 0 dead 1 do
var obst = 0 # obstaculo Â´a direita
var push = 0 # if its pushing the object
var wait = 0
var getFollower = 0 #did the leader get a follower?
var canWalk = 1


timer.period[0] = 0 # executa acoes e actualiza os valores
timer.period[1] = 0 # faz cehck das vars


# reset outputs
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)


sub checkOpCode
	tempOp = received >> 7
	
	if  tempOp == 0b001 then #SYN ACK
		if  leader == 1 then
			if  followerCount &lt; followersNeeded then
				followerCount++
				prox.comm.tx = 0b0100000000 | myId #send a hello
				call prox.comm.enable(1)
				sendCount = 0
				sendGotos = 1
				emit synack
			end
		end

	elseif  tempOp == 0b010 then #HELLO
		#I'm going to receive stuff
		if  receivedMessages[0] != 32 then
			receivedMessages[0] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit hello
		end

	elseif  tempOp == 0b011 then #GOTO x
		if  receivedMessages[1] != 32 then
			followerTargetX = received &amp; 0b0001111111
			receivedMessages[1] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotox followerTargetX
		end
		
	elseif  tempOp == 0b100 then #GOTO y
		if  receivedMessages[2] != 32 then
			followerTargetY = received &amp; 0b0001111111
			receivedMessages[2] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotoy followerTargetY
		end
				
	elseif  tempOp == 0b101 then #GOTO alfa
		if  receivedMessages[3] != 32 then
			followerTargetA = (received &amp; 0b0001111111) * 90
			receivedMessages[3] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotoa followerTargetA
		end
		
	elseif  tempOp == 0b110 then #SYN
		prox.comm.tx = 0b0010000000 | myId #send a syn ack
		call prox.comm.enable(1)
		sendCount = 0
		emit syn

	elseif  tempOp == 0b111 then #ERROR
		# if follower ignore
	end


sub goal
	motor.left.target = 0
	motor.right.target = 0
	timer.period[0] = 0 
	timer.period[1] = 0

sub wait
	motor.left.target = 0
	motor.right.target = 0 
	
sub go
	motor.left.target = 500
	motor.right.target = 500


onevent motor
  call math.muldiv(dleft, motor.left.speed, 30*100, 100*10*10)
  call math.muldiv(dright, motor.right.speed, 30*100, 100*10*10)
  dcenter = (dleft+dright)/2
  
  #emit test dcenter


onevent buttons
    when  button.forward == 1 do
    	call prox.comm.enable(0)
		sendCount = 0
      call leds.top(32, 0, 32)
		timer.period[0] = 1000 # executa acoes e actualiza os valores
		timer.period[1] = 2000 # faz cehck das vars
		currentX = 0
		currentY = 1
		currentDir = 360
		targetX  = 5
		targetY = 100
		targetDir = 360
		canWalk = 1
    end
    
    when  button.backward == 1 do
      call prox.comm.enable(0)
      prox.comm.tx = 0
      
      canWalk = 1

		timer.period[0] = 0
		timer.period[1] = 0
		currentX = 0
		currentY = 0
		currentDir = 360
		obst = 0
		motor.right.target = 0
		motor.left.target = 0
		
		getFollower = 0
		push = 0

		# reset outputs
		call leds.top(0,0,32)
		call leds.bottom.left(0,0,0)
		call leds.bottom.right(0,0,0)
		call leds.circle(0,0,0,0,0,0,0,0)
		receivedMessages = [0, 0, 0, 0, 0, 0, 0, 0]
		followerCount = 0
    end



onevent prox.comm
	call leds.bottom.left(32, 0, 0)
	
	received = prox.comm.rx
	
	if  received != 0 then
		callsub checkOpCode
		#emit op tempOp
	end

    
    
onevent timer0

	if walk == 1 then
		motor.right.target = SPEEDR
		motor.left.target  = SPEEDL
		walk = 0	
	elseif  walk == 0 and motor.right.target == SPEEDR and motor.left.target  == SPEEDL then
		motor.right.target = 0
		motor.left.target  = 0
		if  currentDir == 90 then
			currentY += 1 
			
		elseif currentDir == 180 then
			currentX -= 1
		elseif currentDir == 270 then
			currentY -= 1	
		else
			currentX += 1
		end
					
	elseif turnLeft == 1 then
		motor.left.target  =  -TURNSPEED
		motor.right.target = TURNSPEED
		turnLeft = 2
	
	elseif turnLeft == 2 and motor.right.target != 0 and motor.left.target  != 0 then
		motor.right.target = 0
		motor.left.target  = 0
		turnLeft = 0
		currentDir += 90
		if  currentDir > 360 then
			currentDir = 90
		end
	
	elseif turnRight == 1 then
		motor.left.target  = TURNSPEED
		motor.right.target = -TURNSPEED
		turnRight = 2
		
	elseif turnRight == 2 and motor.right.target != 0 and motor.left.target  != 0 then
		motor.right.target = 0
		motor.left.target  = 0
		turnRight = 0
		currentDir -= 90
		if  currentDir &lt;= 0 then
			currentDir = 360
		end
	end
	
	#emit pos [currentX, currentY, currentDir]
	
onevent timer1

	if prox.ground.delta[0] > 800 and getFollower == 0 then #quando deteta a folha inicialmente
		getFollower++
		followerTargetX = currentX
		followerTargetY = currentY - 1
		followerTargetA = currentDir
		targetX = 1 #the initial follow distance when coming back
		targetY = 0
		targetDir = 180
		
		#call prox.comm.enable(1)
		prox.comm.tx = 0b1100000000 | myId #send a syn
		sendCount = 0
		emit test 1
	elseif getFollower == 2 and push == 0 then #quando acaba de enviar a info toda para o follower
		push++
		targetX = followerTargetX
		targetY = followerTargetY + 1
		targetDir = followerTargetA
		emit test 2
	elseif prox.ground.delta[0] > 800 and getFollower == 2 and push == 1 and wait &lt; 2 then #quando deteta a folha pela segunda vez
		wait++
		emit test 3
	elseif prox.ground.delta[0] > 800 and getFollower == 2 and push == 1 and wait >= 2 then #depois de esperar
		push++
		getFollower++
		canWalk = 0
		getFollower = 3
		callsub go
		emit test 4
	elseif  getFollower == 3 and push &lt; 5 then #conta enquanto faz push
		push++
		emit test 5
	elseif getFollower == 3 and push == 5 then #para o push
		motor.left.target = 0
		motor.right.target = 0
		emit test 6
	elseif  canWalk == 1 then
		if (prox.horizontal[0] > 1400 or prox.horizontal[1] > 1400 or prox.horizontal[2] > 1400 or
		   prox.horizontal[3] > 1400 or prox.horizontal[4] > 1400) and (obst == 0 or obst > 3) and wait != 0 then
				obst = 1
				#emit obsr 0
			# SE TIVER UM OBJECTO QUE APARECA NO DA FRENTE E PELO MENOS UM DOS LATERAIS		
		elseif obst == 1 then
				turnRight = 1
				obst = 2
				#emit obsr 1
		elseif obst == 2 then
				walk = 1
				obst = 3
				#emit obsr 2
		elseif obst == 3 then
				turnLeft = 1
				obst = 4
				#emit obsr 3
		elseif obst == 4 then
				walk = 1
				obst = 5
				#emit obsr 4
		elseif obst == 5 then
				walk = 1
				obst = 0
				#emit obsr 5
		elseif currentX &lt; targetX then
			if currentDir == 180 then     # apontar para a direcao certa e mandar andar
				turnRight = 1
			elseif currentDir == 90 then
				turnRight = 1
			elseif  currentDir == 360 then
				walk = 1
			else
				turnLeft = 1
			end
		elseif currentX > targetX then
			if currentDir == 180 then     # apontar para a direcao certa e mandar andar
				walk = 1
			elseif currentDir == 90 then
				turnLeft = 1
			elseif  currentDir == 360 then
				turnRight = 1
			else
				turnRight = 1
			end
		elseif currentY &lt; targetY then
			if currentDir == 180 then     # apontar para a direcao certa e mandar andar
				turnRight = 1
			elseif currentDir == 90 then
				walk = 1
			elseif  currentDir == 360 then
				turnLeft = 1
			else
				turnRight = 1
			end
		elseif currentY > targetY then
			if currentDir == 180 then     # apontar para a direcao certa e mandar andar
				turnLeft = 1
			elseif currentDir == 90 then
				turnRight = 1
			elseif  currentDir == 360 then
				turnRight = 1
			else
				walk = 1
			end
		elseif currentX == targetX and currentY == targetY and currentDir == targetDir and getFollower == 1 then
			call prox.comm.enable(1)
		elseif currentX == targetX and currentY == targetY then
			if currentDir > targetDir and abs(currentDir - targetDir) &lt; 180 then
				turnRight = 1
			elseif currentDir &lt; targetDir or currentDir > targetDir then
				turnLeft = 1
			end
		end
	end


	if sendCount &lt; SENDTIME then
		sendCount++
	else
		sendCount = 0
		
	if  sendGotos == 1 then
			prox.comm.tx = 0b0110000000 | followerTargetX #send a goto x
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 1
	elseif sendGotos == 2 then
			prox.comm.tx = 0b1000000000 | followerTargetY #send a goto y
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 2
	elseif sendGotos == 3 then
			prox.comm.tx = 0b1010000000 | (followerTargetA/90) #send a goto a
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 3
	elseif sendGotos == 4 then
			call prox.comm.enable(0)
			sendGotos = 0
			getFollower = 2
			emit sendGoto 4
	end
	
end
	

</node>


</network>
