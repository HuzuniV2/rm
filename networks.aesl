<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="0" name="syn"/>
<event size="0" name="synack"/>
<event size="0" name="hello"/>
<event size="1" name="gotox"/>
<event size="1" name="gotoy"/>
<event size="1" name="gotoa"/>
<event size="1" name="op"/>
<event size="1" name="sendGoto"/>


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var myId = 0b0000
var leader = 1 #leader or follower?
var received = 0 #var to keep the received message temporarily
var tempOp = 0 # temp var to parse the OpCode
var followerTargetX = 5
var followerTargetY = 5
var followerTargetA = 270
var SENDTIME = 5
var sendCount = 0
var sendGotos = 0
var followerCount = 0
var followersNeeded = 1
var receivedMessages[] = [0, 0, 0, 0, 0, 0, 0, 0]

#set timers
timer.period[0] = 1000

# reset outputs
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)


sub checkOpCode
	tempOp = received >> 7
	
	if  tempOp == 0b001 then #SYN ACK
		if  leader == 1 then
			if  followerCount &lt; followersNeeded then
				followerCount++
				prox.comm.tx = 0b0100000000 | myId #send a hello
				call prox.comm.enable(1)
				sendCount = 0
				sendGotos = 1
				emit synack
			end
		end

	elseif  tempOp == 0b010 then #HELLO
		#I'm going to receive stuff
		if  receivedMessages[0] != 32 then
			receivedMessages[0] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit hello
		end

	elseif  tempOp == 0b011 then #GOTO x
		if  receivedMessages[1] != 32 then
			followerTargetX = received &amp; 0b0001111111
			receivedMessages[1] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotox followerTargetX
		end
		
	elseif  tempOp == 0b100 then #GOTO y
		if  receivedMessages[2] != 32 then
			followerTargetY = received &amp; 0b0001111111
			receivedMessages[2] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotoy followerTargetY
		end
				
	elseif  tempOp == 0b101 then #GOTO alfa
		if  receivedMessages[3] != 32 then
			followerTargetA = (received &amp; 0b0001111111) * 90
			receivedMessages[3] = 32
			call leds.circle(receivedMessages[0], receivedMessages[1], receivedMessages[2], receivedMessages[3], receivedMessages[4], receivedMessages[5], receivedMessages[6], receivedMessages[7])
			emit gotoa followerTargetA
		end
		
	elseif  tempOp == 0b110 then #SYN
		prox.comm.tx = 0b0010000000 | myId #send a syn ack
		call prox.comm.enable(1)
		sendCount = 0
		emit syn

	elseif  tempOp == 0b111 then #ERROR
		# if follower ignore
	end


onevent prox

    when prox.horizontal[2] >= 2000 do
    		#received = 0b0000000110 | 0b0000000000
    		#emit pair_run received
    end


onevent buttons
    when  button.forward == 1 do
        call prox.comm.enable(1)
        prox.comm.tx = 0b1100000000 | myId #send a syn
        sendCount = 0
        call leds.top(32, 0, 32)
    end
    
    when  button.backward == 1 do
        call prox.comm.enable(1)
        prox.comm.tx = 0
			# reset outputs
			call leds.top(0,0,32)
			call leds.bottom.left(0,0,0)
			call leds.bottom.right(0,0,0)
			call leds.circle(0,0,0,0,0,0,0,0)
			receivedMessages = [0, 0, 0, 0, 0, 0, 0, 0]
			followerCount = 0
    end



onevent prox.comm
	call leds.bottom.left(32, 0, 0)
	
	received = prox.comm.rx
	
	if  received != 0 then
		callsub checkOpCode
		#emit op tempOp
	end

    
    
    
onevent timer0
	if sendCount &lt; SENDTIME then
		sendCount++
	else
		sendCount = 0
		
		if  sendGotos == 1 then
			prox.comm.tx = 0b0110000000 | followerTargetX #send a goto x
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 1
		elseif sendGotos == 2 then
			prox.comm.tx = 0b1000000000 | followerTargetY #send a goto y
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 2
		elseif sendGotos == 3 then
			prox.comm.tx = 0b1010000000 | (followerTargetA/90) #send a goto a
			call prox.comm.enable(1)
			sendGotos++
			emit sendGoto 3
		elseif sendGotos == 4 then
			call prox.comm.enable(0)
			sendGotos = 0
			emit sendGoto 4
		end
	end</node>


</network>
