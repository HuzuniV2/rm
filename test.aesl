<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="1" name="center"/>
<event size="1" name="teta"/>


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">

# Constants
var TIME = 50     #Duration of run (tenths of seconds)
var BASELINE = 70  #Distance between wheels (millimeters)
var LEFT = 200      #Power setting of left wheel
var RIGHT  = 200    #Power setting of right wheel
var SPEED = 100     #speed of robot per 100 power setting (*10)

var dleft     # Distance traveled by the left wheel
var dright    # Distance traveled by the right wheel
var dcenter   # Distance traveled by the center of the robot
var theta     # Change of heading
var dx        # Change of x
var dy        # Change of y
var tcos      # sin of theta
var tsin      # cosine of theta
var state     # 0 = off, 1 = run
var time      # Counter of tenths of seconds

var targetX  = 5  var targetY = 5  var targetDir = 180
var walk = 0     # flag for going straight(hehexd), 0 dead 1 do
var turnLeft = 0 # flag for turning left, 0 dead 1 do
var turnRight = 0 # flag for turning right, 0 dead 1 do
var TURNSPEED = 233 # correct speed to turn 90 degrees

timer.period[0] = 0 # executa acoes e actualiza os valores
timer.period[1] = 0 # faz cehck das vars

# Set timer to expire every tenth of a second
timer.period[0] = 100

# Touch forward button to start run
# Touch center button to stop run (not used)
onevent buttons
  when button.forward == 0 do
    state = 1
    time = 0
    motor.left.target =  LEFT
    motor.right.target = RIGHT
  end
  when button.center == 0 do
    motor.left.target = 0
    motor.right.target = 0
  end

# Compute the odometry
sub odometry
  # Distances traveled by left and right motors
  # Factor is: 100 for motor powers and
  #   10 each for power to speed and time in tenths of a second
  # Center distance is the average of the left and right
  call math.muldiv(dleft, motor.left.speed, SPEED*TIME, 100*10*10)
  call math.muldiv(dright, motor.right.speed, SPEED*TIME, 100*10*10)
  dcenter = (dleft+dright)/2

  # Change of heading and its sin and cosine
  # Factor is 10 for axle width in millimeters and
  #   100 for hundredths of radians
  theta = ((dright-dleft)*10*100)/BASELINE
  # Factor is 100 which is approximately 16-bit 32767 / pi 314
  call math.cos(tcos, theta*100)
  call math.sin(tsin, theta*100)

  # Change of x and y
  # Factor is 16-bit 32767 for sin/cos = 1.0
  call math.muldiv(dx, dcenter, -tsin, 32767)
  call math.muldiv(dy, dcenter, tcos, 32767)

# Every tenth of a second, increment the counter time
# When time = TIME, compute the odometry and stop the motors
onevent timer0
  if  state == 0 then
  	return
  end
  time++
  if  time == TIME then
  	callsub odometry
  	emit center dcenter
  	emit teta theta
    state = 0
    motor.left.target = 0
    motor.right.target = 0
  end
</node>


</network>
